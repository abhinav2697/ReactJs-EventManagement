{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Downloads\\\\12-adv-starting-project\\\\12-adv-starting-project\\\\frontend\\\\src\\\\Pages\\\\NewEvent.js\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 12\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action({\n  request,\n  params\n}) {\n  const data = request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not save event.\"\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","Response","message","status","$RefreshReg$"],"sources":["C:/Users/ACER/Downloads/12-adv-starting-project/12-adv-starting-project/frontend/src/Pages/NewEvent.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\r\nfunction NewEventPage() {\r\n    return <EventForm/>;\r\n  }\r\n  \r\n  export default NewEventPage;\r\n  export async function action({request,params}){\r\n    const data=request.formData();\r\n    const eventData={\r\n      title:data.get('title'),\r\n      image:data.get('image'),\r\n      date:data.get('date'),\r\n      description:data.get('description'),\r\n    }\r\n  const response= await fetch('http://localhost:8080/events',{\r\n      method:'POST',\r\n      headers:{\r\n        'Content-Type':'application/json'\r\n      },\r\n      body:JSON.stringify(eventData)\r\n    });\r\n    if (!response.ok) {\r\n      throw new Response(\r\n        JSON.stringify({ message: \"Could not save event.\" }),\r\n        {\r\n          status: 500,\r\n        }\r\n      );\r\n    } else {\r\n      return response;\r\n    }\r\n  }"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,SAASC,YAAYA,CAAA,EAAG;EACpB,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACrB;AAACC,EAAA,GAFML,YAAY;AAInB,eAAeA,YAAY;AAC3B,OAAO,eAAeM,MAAMA,CAAC;EAACC,OAAO;EAACC;AAAM,CAAC,EAAC;EAC5C,MAAMC,IAAI,GAACF,OAAO,CAACG,QAAQ,CAAC,CAAC;EAC7B,MAAMC,SAAS,GAAC;IACdC,KAAK,EAACH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACvBC,KAAK,EAACL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACvBE,IAAI,EAACN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACrBG,WAAW,EAACP,IAAI,CAACI,GAAG,CAAC,aAAa;EACpC,CAAC;EACH,MAAMI,QAAQ,GAAE,MAAMC,KAAK,CAAC,8BAA8B,EAAC;IACvDC,MAAM,EAAC,MAAM;IACbC,OAAO,EAAC;MACN,cAAc,EAAC;IACjB,CAAC;IACDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAC/B,CAAC,CAAC;EACF,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,QAAQ,CAChBH,IAAI,CAACC,SAAS,CAAC;MAAEG,OAAO,EAAE;IAAwB,CAAC,CAAC,EACpD;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOV,QAAQ;EACjB;AACF;AAAC,IAAAZ,EAAA;AAAAuB,YAAA,CAAAvB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}